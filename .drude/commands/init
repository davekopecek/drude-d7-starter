#!/bin/bash
set -e

## Initialize Drude powered Drupal 7 Installation

# Set to the appropriate site directory ##
SITE_DIRECTORY='default'
# Set to the appropriate site directory
SITE_DOMAIN='drupal7.drude'
# Set to the appropriate site alias for the DB source
#SOURCE_ALIAS='@none'

# Console colors
red='\033[0;31m'
green='\033[0;32m'
green_bg='\033[42m'
yellow='\033[1;33m'
NC='\033[0m'

echo-red () { echo -e "${red}$1${NC}"; }
echo-green () { echo -e "${green}$1${NC}"; }
echo-green-bg () { echo -e "${green_bg}$1${NC}"; }
echo-yellow () { echo -e "${yellow}$1${NC}"; }

# Check whether shell is interactive (otherwise we are running in a non-interactive script environment)
is_tty ()
{
	[[ "$(/usr/bin/tty || true)" != "not a tty" ]]
}

is_windows ()
{
	local res=$(uname | grep 'CYGWIN_NT')
	if [[ "$res" != "" ]]; then
		return 0
	else
		return 1
	fi
}

# Yes/no confirmation dialog with an optional message
# @param $1 confirmation message
_confirm ()
{
	# Skip checks if not a tty
	if ! is_tty ; then return 0; fi

	while true; do
		read -p "$1 [y/n]: " answer
		case $answer in
			[Yy]|[Yy][Ee][Ss] )
				break
				;;
			[Nn]|[Nn][Oo] )
				exit 1
				;;
			* )
				echo 'Please answer yes or no.'
		esac
	done
}

# Copy a settings file from $source to $dest
# Skips if the $dest already exists.
_copy_settings_file()
{
  local source=${1}
  local dest=${2}

  if [[ ! -f $dest ]]; then
    echo "Copying ${dest}..."
    cp "$source" "$dest"
  else
    echo-yellow "${dest} already in place"
  fi
}

# Copy settings files
init_settings ()
{
  cd "$GIT_ROOT"

  # docker-compose
  _copy_settings_file ".drude/drude-local-minimal.yml" "docker-compose.yml"
  
  # Drupal
  #_copy_settings_file "docroot/sites/example.sites.local.php" "docroot/sites/sites.local.php"
  _copy_settings_file "docroot/sites/${SITE_DIRECTORY}/example.settings.local.php" "docroot/sites/${SITE_DIRECTORY}/settings.local.php"
  _copy_settings_file "docroot/sites/site1/example.settings.local.php" "docroot/sites/site1/settings.local.php"
  _copy_settings_file "docroot/sites/site2/example.settings.local.php" "docroot/sites/site2/settings.local.php"
  
  # Behat
  _copy_settings_file 'tests/behat/behat.yml.dist' 'tests/behat/behat.yml'
}

# Install the site
# @param $1 site-name (domain)
site_install ()
{
  cd "$GIT_ROOT/docroot"

  local site_name=''
  if [[ $1 != '' ]]; then
    # Append site name to the argements list if provided
    site_name="--site-name='$1'"
  fi
  # We disable email sending here so site-install does not return an error
  dsh exec "PHP_OPTIONS="'"-d sendmail_path=`which true`"'" drush site-install -y ${site_name}"
}

# Create a new DB
# @param $1 DB name
db_create ()
{
  echo-yellow "Creating DB ${1}..."

  local database=${1}
  local mysql_exec='mysql -h $DB_1_PORT_3306_TCP_ADDR --user=root --password=$DB_1_ENV_MYSQL_ROOT_PASSWORD -e ';
  local query="DROP DATABASE IF EXISTS ${database}; CREATE DATABASE ${database}; GRANT ALL ON ${database}.* TO "'$DB_1_ENV_MYSQL_USER'"@'%'"

  dsh exec "${mysql_exec} \"${query}\""
}

# Import database from the source site alias
db_import ()
{
  #_confirm "Do you want to import DB from ${SOURCE_ALIAS}?"

  cd "$GIT_ROOT/docroot"
  dsh drush -l "$SITE_DOMAIN" sql-sync "$SOURCE_ALIAS" @self -y
}

# Misc drush commands to bring DB up-to-date
db_updates ()
{
  cd "$GIT_ROOT/docroot"
  echo-yellow "Applying DB updates..."
  set -x

  dsh drush -l ${SITE_DOMAIN} status
  dsh drush -l ${SITE_DOMAIN} updb -y
  dsh drush -l ${SITE_DOMAIN} fr-all -y
  dsh drush -l ${SITE_DOMAIN} cc all
  dsh drush -l ${SITE_DOMAIN} cron -v

  set +x
}

# Local adjustments
local_settings ()
{
  cd "$GIT_ROOT"
  echo-yellow "Applying local settings..."
  cd docroot
  set -x

  dsh drush -l ${SITE_DOMAIN} en stage_file_proxy -y

  set +x
}

# Compile Sass
compass_compile ()
{
  cd "$GIT_ROOT"
  echo-yellow "Compiling Sass..."
  set -x

  #cd docroot/sites/all/themes/<themename>
  #dsh exec bundle install
  #dsh exec bundle exec compass compile

  set +x
}

# Run basic Behat validation tests
run_behat ()
{
  cd "$GIT_ROOT"

  echo -e "${yellow}Launching Behat validation tests...${NC}"
  cd tests/behat
  dsh behat --format=pretty --out=std --format=junit --out=junit features/drush-si-validation.feature
}

#-------------------------- Execution --------------------------------

# Set repo root as working directory.
GIT_ROOT=$(git rev-parse --show-toplevel)
if [[ -z "$GIT_ROOT" ]]; then
	echo-red "Git repository was not found"
	exit 1;
fi
cd "$GIT_ROOT"

# Project initialization steps
echo -e "${green_bg} Step 1 ${NC}${green} Initializing local project configuration...${NC}"
init_settings

if [[ $DOCKER_RUNNING == "true" ]]; then
  echo -e "${green_bg} Step 2 ${NC}${green} Recreating services...${NC}"
  dsh reset -f
else
  echo -e "${green_bg} Step 2 ${NC}${green} Creating services...${NC}"
  dsh up
fi

echo "Waiting 10s for MySQL to initialize...";
sleep 10

echo -e "${green_bg} Step 3 ${NC}${green} Installing site...${NC}"
site_install "My Drupal 7 Site"

# Uncomment line below to install site 1
#db_create 'site1' && site_install 'drupal7-site1.drude'
# Uncomment line below to install site 2
#db_create 'site2' && site_install 'drupal7-site2.drude'

# Examples of other things that can be done.
#db_import
#db_updates
#local_settings
#compass_compile
#run_behat

if is_windows; then
	echo-green "Add ${SITE_DOMAIN} to your hosts file (/etc/hosts), e.g.:"
	echo-green "192.168.10.10  ${SITE_DOMAIN}"
	echo-green "Alternatively configure wildcard DNS resolution and never edit the hosts file again! Instructions:"
	echo-green "https://github.com/blinkreaction/boot2docker-vagrant/blob/develop/docs/networking.md#dns-resolution"
	echo
fi

echo -en "${green_bg} DONE! ${NC} "
echo -e "Open ${yellow}http://${SITE_DOMAIN}${NC} in your browser to verify the setup."
